schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Class {
  classGrade: String!
  discipline: String!
  id: ID
  userId: String!
}

type Mutation {
  createUserProfile(input: CreateUserProfileInput!): UserProfile
  deleteUserProfile: UserProfile
  updateUserProfile(input: UpdateUserProfileInput!): UserProfile
}

type Query {
  getProfile(id: ID!): UserProfile
  getUserProfile: UserProfile
  listUserProfiles(filter: TableUserProfileFilterInput, limit: Int, nextToken: String): UserProfileConnection
}

type Subscription {
  onCreateUserProfile(contentRecommendationFreq: String, language: String, personalDevelopmentFrequency: String, userId: String): UserProfile @aws_subscribe(mutations : ["createUserProfile"])
  onDeleteUserProfile(contentRecommendationFreq: String, language: String, personalDevelopmentFrequency: String, userId: String): UserProfile @aws_subscribe(mutations : ["deleteUserProfile"])
  onUpdateUserProfile(contentRecommendationFreq: String, language: String, personalDevelopmentFrequency: String, userId: String): UserProfile @aws_subscribe(mutations : ["updateUserProfile"])
}

type UserAccount {
  email: String!
  firstName: String!
  id: ID
  lastName: String!
  userId: String!
}

type UserProfile {
  class: [Class]
  contentRecommendationFreq: String
  language: String
  personalDevelopmentFrequency: String
  user: UserAccount
  userId: String
}

type UserProfileConnection {
  items: [UserProfile]
  nextToken: String
}

input CreateUserProfileInput {
  contentRecommendationFreq: String
  language: String
  personalDevelopmentFrequency: String
  userId: String
}

input DeleteUserProfileInput {
  userId: String
}

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input TableUserProfileFilterInput {
  contentRecommendationFreq: TableStringFilterInput
  language: TableStringFilterInput
  personalDevelopmentFrequency: TableStringFilterInput
  userId: TableStringFilterInput
}

input UpdateUserProfileInput {
  contentRecommendationFreq: String
  language: String
  personalDevelopmentFrequency: String
  userId: String
}

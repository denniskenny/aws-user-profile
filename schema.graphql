schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Mutation {
  createProfileElement(input: CreateProfileElementInput!): ProfileElement
  deleteProfileElement(input: DeleteProfileElementInput!): ProfileElement
  putPost(id: ID!, title: String!): Post
  updateProfileElement(input: UpdateProfileElementInput!): ProfileElement
}

type Post {
  id: ID!
  title: String!
}

type ProfileElement {
  id: ID!
  name: String!
  user: String!
  value: String!
}

type ProfileElementConnection {
  items: [ProfileElement]
  nextToken: String
}

type Query {
  getProfileElement(name: String!, user: String!): ProfileElement
  listProfileElements(filter: TableProfileElementFilterInput, limit: Int, nextToken: String): ProfileElementConnection
  singlePost(id: ID!): Post
}

type Subscription {
  onCreateProfileElement(id: ID, name: String, user: String, value: String): ProfileElement @aws_subscribe(mutations : ["createProfileElement"])
  onDeleteProfileElement(id: ID, name: String, user: String, value: String): ProfileElement @aws_subscribe(mutations : ["deleteProfileElement"])
  onUpdateProfileElement(id: ID, name: String, user: String, value: String): ProfileElement @aws_subscribe(mutations : ["updateProfileElement"])
}

input CreateProfileElementInput {
  id: ID!
  name: String!
  user: String!
  value: String!
}

input DeleteProfileElementInput {
  name: String!
  user: String!
}

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TableProfileElementFilterInput {
  id: TableIDFilterInput
  name: TableStringFilterInput
  user: TableStringFilterInput
  value: TableStringFilterInput
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input UpdateProfileElementInput {
  id: ID
  name: String!
  user: String!
  value: String
}